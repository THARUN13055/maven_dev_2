pipeline{
    agent any
    tools {
        maven "maven3.8.6"
    }

    stages{
        stage('git checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/THARUN13055/maven_dev_2.git'
            }
        }
        stage('unit testing'){
            steps{
                sh 'mvn test'
            }
        }
        stage('integration testing'){
            steps{
                sh 'mvn verify -DskipUnitTests'
            }
        }
        stage('build maven'){
            steps{
                sh 'mvn clean install'
            }
        }
        stage('static code analysis'){
            steps{
                script{
                    //her we are using sonarqube secret file to clean the previous jar files
                    withSonarQubeEnv(credentialsId: 'sonar-api') {
                    sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }
        stage('quality gate status'){
            steps{
                //it will check the quality of the code using sonarqube
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-api'
            }
        }
        stage('upload war file to nexus'){
            steps{
                script{
                    //this is repo for version saving
                    def pom = readMavenPom file: 'pom.xml'
                    //this is the repo for snapshot saving
                    def snap = pom.version.endsWith("SNAPSHOT") ? "demoapp-snapshot" : "demoapp-release"
                    nexusArtifactUploader artifacts: 
                    [
                        [
                            artifactId: 'springboot',
                            classifier: '',
                            file: 'target/Uber.jar',
                            type: 'jar'
                        ]
                    ],
                    credentialsId: 'admin',
                    groupId: 'com.example',
                    nexusUrl: '20.228.163.69:8081',
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    repository: snap,
                    version: "${pom.version}"
                }
            }
        }
        stage('docker remove image'){
            steps{
                //if is exes steps for removing the previous image
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                    sh "docker rmi tharun13055/$JOB_NAME:v1.$currentBuild.previousBuild.number"
                }
            }
        }
        stage('docker build'){
            steps{
                script{
                    //this is extra image which we are build for identification
                    sh "docker build -t tharun13055/$JOB_NAME:v1.$BUILD_ID ."
                    //this image is use to push in k8
                    sh "docker build -t tharun13055/$JOB_NAME:v1.latest"
                    //this cmd is use to remove the <none> image
                    sh "docker image prune -f"
                }
            }
        }
        stage('docker push'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerhub')]) {
                        sh "docker login -u tharun13055 -p ${dockerhub-pwd}"
                        sh "docker push tharun13055/$JOB_NAME:v1.latest"
                    }
                }
            }
        }
    }
}